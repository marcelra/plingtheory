#include "Hypercube.h"

namespace Math
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Hypercube::Hypercube( const std::vector< double >& lowerBounds, const std::vector< double >& upperBounds ) :
   m_lowerBounds( lowerBounds ),
   m_upperBounds( upperBounds )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Hypercube::Hypercube( const std::vector< Interval >& intervals ) :
   m_lowerBounds( intervals.size() ),
   m_upperBounds( intervals.size() )
{
   for ( size_t i = 0; i < intervals.size(); ++i )
   {
      m_lowerBounds[ i ] = intervals[ i ].getMin();
      m_upperBounds[ i ] = intervals[ i ].getMax();
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getDimensionality
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t Hypercube::getDimensionality() const
{
   return m_lowerBounds.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getMin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double Hypercube::getMin( size_t index ) const
{
   return m_lowerBounds[ index ];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getMax
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double Hypercube::getMax( size_t index ) const
{
   return m_upperBounds[ index ];
}

} /// namespace Math

