#include "RegularAccumArray.h"

#include "RootUtilities.h"

#include <limits>

namespace Math
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RegularAccumArray::RegularAccumArray( size_t nBins, double minX, double maxX ) :
   m_underflow( -std::numeric_limits<double>::max(), minX ),
   m_overflow( maxX, std::numeric_limits<double>::max() ),
   m_missed( -std::numeric_limits<double>::max(), std::numeric_limits<double>::max() ),
   m_binWidth( ( maxX - minX ) / nBins )
{
   m_bins.reserve( nBins );
   double binXleft = minX;
   double binXright = minX + m_binWidth;
   for ( size_t i = 0; i < nBins; ++i )
   {
      m_bins.push_back( Bin( binXleft, binXright ) );
      binXleft = binXright;
      binXright += m_binWidth;
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RegularAccumArray::~RegularAccumArray()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getBinContent
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double RegularAccumArray::getBinContent( size_t iBin ) const
{
   return m_bins[ iBin ].getContents();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getAllBinContents
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RealVector RegularAccumArray::getAllBinContents() const
{
   RealVector result( m_bins.size() );
   for ( size_t iBin = 0; iBin < m_bins.size(); ++iBin )
   {
      result[ iBin ] = m_bins[ iBin ].getContents();
   }
   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getMissedContent
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double RegularAccumArray::getMissedContent() const
{
   return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getUnderflow
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double RegularAccumArray::getUnderflow() const
{
   return m_underflow.getContents();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getOverflow
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double RegularAccumArray::getOverflow() const
{
   return m_overflow.getContents();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getMissedBin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const IAccumArray::Bin& RegularAccumArray::getMissedBin() const
{
   return m_missed;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getUnderflowBin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const IAccumArray::Bin& RegularAccumArray::getUnderflowBin() const
{
   return m_underflow;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getOverflowBin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const IAccumArray::Bin& RegularAccumArray::getOverflowBin() const
{
   return m_overflow;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getBinEntries
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const TwoTuple& RegularAccumArray::getBinEntries( size_t iBin ) const
{
   return m_bins[ iBin ].getEntries();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getBins
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const std::vector< IAccumArray::Bin >& RegularAccumArray::getBins() const
{
   return m_bins;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getNumBins
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t RegularAccumArray::getNumBins() const
{
   return m_bins.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getMinX
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double RegularAccumArray::getMinX() const
{
   return m_underflow.getMaxX();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getMaxX
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double RegularAccumArray::getMaxX() const
{
   return m_overflow.getMinX();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// findBin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t RegularAccumArray::findBin( double x ) const
{
   double minX = m_underflow.getMaxX();
   double indexD = ( x - minX ) / m_binWidth;
   size_t index = indexD;
   return index;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getBin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const IAccumArray::Bin& RegularAccumArray::getBin( size_t binIndex ) const
{
   return m_bins[ binIndex ];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getBin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
IAccumArray::Bin& RegularAccumArray::getBin( size_t binIndex )
{
   return const_cast< IAccumArray::Bin& > ( const_cast< const RegularAccumArray* >( this )->getBin( binIndex ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// add
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RegularAccumArray::add( double x, double value )
{
   if ( x < m_underflow.getMaxX() )
   {
      m_underflow.add( x, value );
   }
   else if ( x > m_overflow.getMinX() )
   {
      m_overflow.add( x, value );
   }
   else
   {
      size_t binIndex = findBin( x );
      m_bins[ binIndex ].add( x, value );
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setBinContent
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RegularAccumArray::setBinContent( size_t binIndex, double value )
{
   m_bins[ binIndex ].set( value );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setBinContents
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RegularAccumArray::setBinContents( const RealVector& contents )
{
   assert( contents.size() == m_bins.size() );
   for ( size_t iBin = 0; iBin < m_bins.size(); ++iBin )
   {
      setBinContent( iBin, contents[ iBin ] );
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// createHistogram
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TH1F* RegularAccumArray::createHistogram() const
{
   const TString& name = RootUtilities::getInstance().generateUniqueName( "regularAccumArray" );

   TH1F* hist = new TH1F( name, name, getNumBins(), getMinX(), getMaxX() );
   for ( size_t iBin = 0; iBin < getNumBins(); ++iBin )
   {
      double val = getBinContent( iBin );
      hist->SetBinContent( iBin + 1, val );
   }

   return hist;
}

} /// namespace Math

