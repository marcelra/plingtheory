#include "StftData.h"

#include "SrSpectrum.h"
#include "WindowLocation.h"

namespace WaveAnalysis
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
StftData::StftData( FourierConfig::CSPtr config ) :
   m_config( config )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
StftData::~StftData()
{
   for ( size_t i = 0; i < getNumSpectra(); ++i )
   {
      delete m_transformedData[i];
      delete m_windowLocations[i];
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// copy constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
StftData::StftData( const StftData& other ) :
   m_transformedData( other.m_transformedData.size() ),
   m_windowLocations( other.m_windowLocations.size() ),
   m_config( other.m_config )
{
   assert( m_transformedData.size() == m_windowLocations.size() );
   for ( size_t i = 0; i < m_transformedData.size(); ++i )
   {
      m_transformedData[ i ] = other.m_transformedData[ i ]->clone();
      m_windowLocations[ i ] = new WindowLocation( *other.m_windowLocations[ i ] );
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getNumSpectra
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t StftData::getNumSpectra() const
{
   return m_transformedData.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSpectrum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FourierSpectrum& StftData::getSpectrum( size_t spectrumIndex )
{
   return *m_transformedData[spectrumIndex];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSpectrum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const FourierSpectrum& StftData::getSpectrum( size_t spectrumIndex ) const
{
   return *m_transformedData[spectrumIndex];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// isReassigned
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool StftData::isReassigned() const
{
   assert( getNumSpectra() > 0 );
   return ( dynamic_cast< const SrSpectrum* >( &this->getSpectrum( 0 ) ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSrSpectrum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SrSpectrum& StftData::getSrSpectrum( size_t spectrumIndex )
{
   return dynamic_cast< SrSpectrum& >( getSpectrum( spectrumIndex ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSrSpectrum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const SrSpectrum& StftData::getSrSpectrum( size_t spectrumIndex ) const
{
   return dynamic_cast< const SrSpectrum& >( getSpectrum( spectrumIndex ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getWindowLocation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const WindowLocation& StftData::getWindowLocation( size_t spectrumIndex ) const
{
   return *m_windowLocations[ spectrumIndex ];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getWindowLocationNoOverlap
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
WindowLocation StftData::getWindowLocationNoOverlap( size_t spectrumIndex ) const
{
   const WindowLocation& winLocCentre = getWindowLocation( spectrumIndex );
   size_t centreCentre = winLocCentre.getCentre();

   /// Boundary cases
   size_t resultLeft = 0;
   size_t resultRight = getWindowLocation( getNumSpectra() - 1 ).getLastSample();
   size_t centreRight = winLocCentre.getLastSample();

   if ( spectrumIndex > 0 )
   {
      const WindowLocation& winLocLeft = getWindowLocation( spectrumIndex - 1 );
      size_t centreLeft = winLocLeft.getCentre();
      resultLeft = ( centreLeft + centreCentre ) / 2;
   }
   if ( spectrumIndex < getNumSpectra() - 1 )
   {
      const WindowLocation& winLocRight = getWindowLocation( spectrumIndex + 1 );
      size_t centreRight = winLocRight.getCentre();
      resultRight = ( centreCentre + centreRight ) / 2;
   }

   if ( resultLeft < winLocCentre.getFirstSample() )
   {
      resultLeft = winLocCentre.getFirstSample();
   }
   if ( centreRight > winLocCentre.getLastSample() )
   {
      /// TODO: see memcheck comment in StftAlgorithm. Check if this should be -1.
      resultRight = winLocCentre.getLastSample();
   }

   WindowLocation result( resultLeft, resultRight - 1 );
   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// addSpectrum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void StftData::addSpectrum( FourierSpectrum* spectrum, WindowLocation* windowLocation )
{
   m_transformedData.push_back( spectrum );
   m_windowLocations.push_back( windowLocation );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const FourierConfig& StftData::getConfig() const
{
   return *m_config;
}


} /// namespace WaveAnalysis
