#include "AnalysisSuite.h"

#include "AnalysisSrpa.h"
#include "Logger.h"
#include "Utils.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// execute
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AnalysisSuite::execute()
{
   analyseSrpa();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// singleAnalysis
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AnalysisSuite::singleAnalysis()
{
   analyseSrpa();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// analyseSrpa
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AnalysisSuite::analyseSrpa()
{
   Logger msg( "analyseSrpa" );
   msg << Msg::Info << "Running analyseSrpa..." << Msg::EndReq;

   Analysis::AnalysisSrpa anaAlg;

   RealVector&& frequencies = Utils::createRangeReal( 50, 10000, 500 );
   const RealVector& deltaFreq = Utils::createRangeReal( 0.1, 500, 101 );

   anaAlg.studyFrequencyPerformance( frequencies );

   frequencies = realVector( 100, 400, 1000, 10000 );
   anaAlg.studyTwinPeakPerformance( frequencies, deltaFreq, 1 );
   anaAlg.studyAmpBehaviour( 440, 1, 1 );
   anaAlg.studyAmpBehaviour( 440, 1, 0 );
   anaAlg.studyAmpBehaviour( 440, 1, 0.25 );
}
