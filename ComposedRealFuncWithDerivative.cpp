#include "ComposedRealFuncWithDerivative.h"

namespace Math
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ComposedRealFuncWithDerivative::ComposedRealFuncWithDerivative( const IRealFunction& func, const IRealFunction& derivative ) :
   m_func( func.clone() ),
   m_derivative( derivative.clone() )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ComposedRealFuncWithDerivative::~ComposedRealFuncWithDerivative()
{
   delete m_func;
   delete m_derivative;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// copy constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ComposedRealFuncWithDerivative::ComposedRealFuncWithDerivative( const ComposedRealFuncWithDerivative& other ) :
   IRealFuncWithDerivative(),
   m_func( other.m_func->clone() ),
   m_derivative( other.m_derivative->clone() )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// assignment operator
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ComposedRealFuncWithDerivative& ComposedRealFuncWithDerivative::operator=( const ComposedRealFuncWithDerivative& other )
{
   if ( this == &other )
   {
      return *this;
   }

   delete m_func;
   delete m_derivative;

   m_func = other.m_func->clone();
   m_derivative = other.m_derivative->clone();
   return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// clone
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ComposedRealFuncWithDerivative* ComposedRealFuncWithDerivative::clone() const
{
   return new ComposedRealFuncWithDerivative( *this );
}

} /// namespace Math
