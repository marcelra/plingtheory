#ifndef ITHREAD_H
#define ITHREAD_H

#include <cstddef>
#include <string>

namespace boost
{
class thread;
}

class Logger;

class IThread
{
   public:
      IThread( const std::string& threadName );
      virtual ~IThread();

   public:
      Logger& getLogger();

   public:
      void start();
      void join();

      bool hasStarted() const;
      bool isRunning() const;
      bool isFinished() const;

   private:
      virtual void run();

   private:
      static void runWrapper( IThread* instance );
      void waitNextPoll();

   private:
      bool     m_isFinished;
      bool     m_isRunning;

      size_t   m_pollTimeMilliSeconds;

      boost::thread*   m_thread;

   private:
      mutable Logger*  m_logger;
};



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Inline methods IThread
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// hasStarted
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool IThread::hasStarted() const
{
   return m_isRunning || m_isFinished;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// isRunning
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool IThread::isRunning() const
{
   return m_isRunning;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// isFinished
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool IThread::isFinished() const
{
   return m_isFinished;
}



#endif // ITHREAD_H
