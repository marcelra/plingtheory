#include "SortCache.h"

#include <map>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SortCache::SortCache( const RealVector& values ) :
   m_translation( values.size() )
{
   std::map< double, int > sortedValueVsIndex;
   for ( size_t i = 0; i < values.size(); ++i )
   {
      sortedValueVsIndex.insert( std::pair< double, int >( values[i], i ) );
   }

   size_t sortedIndex = 0;
   for ( std::map< double, int >::const_iterator it = sortedValueVsIndex.begin(); it != sortedValueVsIndex.end(); ++it, ++sortedIndex )
   {
      m_translation[ sortedIndex ] = it->second;
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SortCache::~SortCache()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSortedIndex
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t SortCache::getSortedIndex( size_t index ) const
{
   return m_translation[ index ];
}
