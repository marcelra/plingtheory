#include "SortCache.h"

#include <map>
#include <cassert>
#include "Utils.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SortCache::SortCache( const RealVector& values ) :
   m_sortedIndices( Utils::createRange( 0, values.size() ) )
{
   std::sort( m_sortedIndices.begin(), m_sortedIndices.end(), [ &values ]( size_t i1, size_t i2 ){ return values[ i1 ] < values[ i2 ]; } );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SortCache::~SortCache()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// applyTo
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RealVector SortCache::applyTo( const RealVector& vector ) const
{
   assert( vector.size() == m_sortedIndices.size() );
   RealVector result( vector.size() );
   for ( size_t i = 0; i < result.size(); ++i )
   {
      result[i] = vector[ getSortedIndex( i ) ];
   }
   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// applyReverseTo
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RealVector SortCache::applyReverseTo( const RealVector& vector ) const
{
   assert( vector.size() == m_sortedIndices.size() );
   RealVector result( vector.size() );
   for ( size_t i = 0; i < result.size(); ++i )
   {
      result[i] = vector[ getReverseSortedIndex( i ) ];
   }
   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSize
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t SortCache::getSize() const
{
   return m_sortedIndices.size();
}

