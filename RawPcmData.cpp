#include "RawPcmData.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RawPcmData::RawPcmData( const SamplingInfo& samplingInfo ) :
   std::vector<double>(),
   m_samplingInfo( samplingInfo )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RawPcmData::RawPcmData( const SamplingInfo& samplingInfo, size_t numSamples ) :
   std::vector<double>( numSamples ),
   m_samplingInfo( samplingInfo )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RawPcmData::RawPcmData( const SamplingInfo& samplingInfo, size_t numSamples, double initialVal ) :
   std::vector<double>( numSamples, initialVal ),
   m_samplingInfo( samplingInfo )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RawPcmData::RawPcmData( const SamplingInfo& samplingInfo, const double* first, const double* last ) :
   std::vector<double>( first, last ),
   m_samplingInfo( samplingInfo )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// dump
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RawPcmData::dump( std::ostream& os ) const
{
   for ( size_t iSample = 0; iSample < size(); ++iSample )
   {
      os << (*this)[iSample] << "\n";
   }
   os.flush();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// pasteAtEnd
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RawPcmData::pasteAtEnd( const RawPcmData& data )
{
   insert( end(), data.begin(), data.end() );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mixAdd
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RawPcmData::mixAdd( const RawPcmData& data, size_t offset )
{
   if ( data.size() + offset > size() )
   {
      Logger msg( "RawPcmData" );
      msg << Msg::Error << "Cannot mix larger data set onto smaller source." << Msg::EndReq;
      assert( false );
   }
   size_t dataIndex = 0;
   for ( size_t iSample = offset; iSample < data.size() + offset; ++iSample )
   {
      (*this)[ iSample ] += data[ dataIndex ];
      ++dataIndex;
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// normaliseToPeak
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RawPcmData::normaliseToPeak()
{
   /// TODO: HACK (needed for SineEnvelopeGenerator)!!!
   double peak = 0;
   for ( size_t i = 0; i < size(); ++i )
   {
      if ( at(i) > peak )
      {
         peak = at(i);
      }
   }
   double fac = 1.0/peak;
   for ( size_t i = 0; i < size(); ++i )
   {
      (*this)[i] = fac*at(i);
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// convertToVectorData
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RealVectorPtr RawPcmData::copyToVectorData() const
{
   const double* itBeg = &(*this)[0];
   std::vector<double>* result = new std::vector<double>( itBeg, itBeg + size() );
   return RealVectorPtr( result );
}
