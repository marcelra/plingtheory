#include "PaintAreaBase.h"

#include <QMouseEvent>
#include <QPainter>
#include <QPaintEvent>

namespace Plotting
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PaintAreaBase::PaintAreaBase( QWidget* parent ) :
   QWidget( parent ),
   m_name( "Undefined" ),
   m_oldMousePos( 0 )
{
   setBackgroundRole( QPalette::Base );
   setAutoFillBackground( true );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PaintAreaBase::~PaintAreaBase()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// transformToCanvasCoordinates
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QPointF PaintAreaBase::transformToCanvasCoordinates( const QPointF& point ) const
{
   QPointF result;

   double scaleX = m_canvas.width() / m_viewPort.width();
   double scaleY = - m_canvas.height() / m_viewPort.height();

   double shiftX = -m_viewPort.left();

   result.setX( ( point.x() + shiftX ) * scaleX );
   result.setY( scaleY * ( m_viewPort.top() - point.y() ) );

   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// transformToWorldCoordinates
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QPointF PaintAreaBase::transformToWorldCoordinates( const QPoint& point ) const
{
   double scaleX = m_viewPort.width() / m_canvas.width();
   double scaleY = -m_viewPort.height() / m_canvas.height();

   double shiftX = m_viewPort.left();

   QPointF result;
   result.setX( point.x() * scaleX + shiftX );
   result.setY( -scaleY * point.y() + m_viewPort.top() );

   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// paintEvent
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PaintAreaBase::paintEvent( QPaintEvent* paintEvent )
{
   /// Synchronise canvas size.
   m_canvas = QRect( 0, 0, width() - 1, height() - 1 );

   /// Contruct painter.
   m_painter = new QPainter( this );

   /// Call implementation specific paint method.
   paintEventImpl( paintEvent );

   /// Cleanup.
   delete m_painter;

   /// Accept the event.
   paintEvent->accept();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PaintAreaBase::setName( const QString& name )
{
   m_name = name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getViewPort
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const QRectF& PaintAreaBase::getViewPort() const
{
   return m_viewPort;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setViewPort
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PaintAreaBase::setViewPort( const QRectF& viewPort )
{
   m_viewPort = viewPort;
   emit viewPortChanged( m_viewPort );
   update();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mouseReleaseEvent
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PaintAreaBase::mouseReleaseEvent( QMouseEvent* event )
{
   if ( m_oldMousePos )
   {
      delete m_oldMousePos;
      m_oldMousePos = 0;
   }
   event->accept();
}

} /// namespace Plotting

