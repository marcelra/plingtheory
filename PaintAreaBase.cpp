#include "PaintAreaBase.h"

#include <QPainter>
#include <QPaintEvent>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PaintAreaBase::PaintAreaBase( QWidget* parent ) :
   QWidget( parent ),
   m_name( "Undefined" )
{
   setBackgroundRole( QPalette::Base );
   setAutoFillBackground( true );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PaintAreaBase::~PaintAreaBase()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// transformToCanvasCoordinates
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QPointF PaintAreaBase::transformToCanvasCoordinates( const QPointF& point ) const
{
   QPointF result;

   double scaleX = m_canvas.width() / m_viewPort.width();
   double scaleY = m_canvas.height() / m_viewPort.height();

   double shiftX = -m_viewPort.left();
   double shiftY = m_viewPort.bottom();

   result.setX( ( point.x() + shiftX ) * scaleX );
   result.setY( ( -point.y() + shiftY ) * scaleY );

   // if ( result.x() < 0 )
   // {
   //    result.setX( -1 );
   // }
   // else if ( result.x() > m_canvas.width() )
   // {
   //    result.setX( m_canvas.width() + 2 );
   // }
   // if ( result.y() < 0 )
   // {
   //    result.setY( -1 );
   // }
   // else if ( result.y() > m_canvas.height() )
   // {
   //    result.setY( m_canvas.height() + 2 );
   // }
   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// transformToWorldCoordinates
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QPointF PaintAreaBase::transformToWorldCoordinates( const QPoint& point ) const
{
   double scaleX = m_viewPort.width() / m_canvas.width();
   double scaleY =  m_viewPort.height() / m_canvas.height();

   double shiftX = m_viewPort.left();
   double shiftY = -m_viewPort.bottom();

   QPointF result;
   result.setX( point.x() * scaleX + shiftX );
   result.setY( point.y() * scaleY + shiftY );

   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// paintEvent
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PaintAreaBase::paintEvent( QPaintEvent* paintEvent )
{
   /// Synchronise canvas size.
   m_canvas = QRect( 0, 0, width() - 1, height() - 1 );

   /// Contruct painter.
   m_painter = new QPainter( this );

   /// Call implementation specific paint method.
   paintEventImpl( paintEvent );

   /// Cleanup.
   delete m_painter;

   /// Accept the event.
   paintEvent->accept();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PaintAreaBase::setName( const QString& name )
{
   m_name = name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getViewPort
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const QRectF& PaintAreaBase::getViewPort() const
{
   return m_viewPort;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setViewPort
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PaintAreaBase::setViewPort( const QRectF& viewPort )
{
   m_viewPort = viewPort;
   emit viewPortChanged( m_viewPort );
   update();
}

