#include "Logger.h"

#include "Exceptions.h"
#include "GlobalLogParameters.h"

#include <iostream>
#include <sstream>

// #include <boost/thread.hpp>

namespace
{
/// Remove?
// boost::mutex loggerMutex;
// boost::mutex::scoped_lock* loggerLock = 0;
} /// anonymous namespace

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Logger constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Logger::Logger( const std::string& name ) :
   m_loggerId( s_loggerId++ ),
   m_name( name ),
   m_stream( GlobalLogParameters::getInstance().getStream() ),
   m_currentLevel( Msg::Never ),
   m_threshold( GlobalLogParameters::getInstance().getThreshold( m_loggerId ) )
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Logger destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Logger::~Logger()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Logger copy constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Logger::Logger( const Logger& other ) :
  m_name( other.m_name ),
  m_stream( other.m_stream ),
  m_currentLevel( Msg::Never ),
  m_threshold( other.m_threshold )
{
   assert( false );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setThreshold
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Logger::setThreshold( Msg::LogLevel threshold )
{
   if ( !GlobalLogParameters::getInstance().doOverrideLocalThresholds() )
   {
      if ( !GlobalLogParameters::getInstance().isInspected( m_loggerId ) )
      {
         this->m_threshold = threshold;
      }
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Template specialisation for Msg::LogLevel
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <>
Logger& Logger::operator<<( const Msg::LogLevel& logLevel )
{
   // loggerLock = new boost::mutex::scoped_lock( loggerMutex );

   m_currentLevel = logLevel;

   if ( m_currentLevel <= m_threshold )
   {
      size_t nameFieldWidth = GlobalLogParameters::getInstance().getNameFieldWidth();
      size_t levelFieldWidth = GlobalLogParameters::getInstance().getLevelFieldWidth();
      size_t idFieldWidth = GlobalLogParameters::getInstance().getLoggerIdFieldWidth();

      formatInField( m_name, nameFieldWidth );
      m_stream << Msg::colorCode( m_currentLevel );
      formatInField( Msg::strRep( m_currentLevel ), levelFieldWidth );
      if ( GlobalLogParameters::getInstance().getUseColors() )
      {
         m_stream << "\033[0m";
      }

      if ( GlobalLogParameters::getInstance().doDisplayLoggerIds() )
      {
         std::stringstream loggerIdMsg;
         loggerIdMsg << m_loggerId;
         formatInField( loggerIdMsg.str(), idFieldWidth );
      }

      m_stream << m_prefix;
   }

   return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Template specialisation for Msg::LogCommand
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <>
Logger& Logger::operator<<( const Msg::LogCommand& logCommand )
{
   switch ( logCommand )
   {
      case Msg::EndReq:
         if ( m_currentLevel <= m_threshold )
         {
            m_stream << std::endl;
            m_currentLevel = Msg::Never;
         }
         // delete loggerLock;
         break;
      default:
         assert( false );
   }
   return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Template specialisation for vector printing
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<>
Logger& Logger::operator<<( const RealVector& vec )
{
   if ( vec.size() == 0 )
   {
      *this << "()";
   }
   else
   {
      *this << "(";
      for ( size_t i = 0; i < vec.size() - 1; ++i )
      {
         *this << vec[i] << ", ";
      }
      *this << vec[ vec.size() - 1 ] << ")";
   }
   return *this;
}

template<>
Logger& Logger::operator<<( const std::vector< size_t >& indexVector )
{
   if ( indexVector.size() == 0 )
   {
      *this << "()";
   }
   else
   {
      *this << "(";
      for ( size_t i = 0; i < indexVector.size() - 1; ++i )
      {
         *this << indexVector[i] << ", ";
      }
   }
   *this << indexVector[ indexVector.size() - 1 ] << ")";
   return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// formatInField
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Logger::formatInField( const std::string& message, size_t lengthOfField )
{
   if ( m_currentLevel <= m_threshold )
   {
      size_t lenMsg = message.size();
      if ( lenMsg < lengthOfField )
      {
         m_stream << message;
         std::string spacer( lengthOfField - lenMsg, ' ' );
         m_stream << spacer;
      }
      else
      {
         std::string croppedMessage = message.substr( 0, lengthOfField - 3 );
         croppedMessage += "...";
         m_stream << croppedMessage;
      }
      std::string spacer( GlobalLogParameters::getInstance().getSpacerWidth(), ' ' );
      m_stream << spacer;
   }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Static members
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LoggerId Logger::s_loggerId = 0;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Global logger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Global logger instance
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Logger* gp_gLog = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Global logger access
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Logger& gLog()
{
   return *gp_gLog;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// initGlobalLogger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initGlobalLogger( int threshold, const void* inspectMap, bool doUseColors, const std::string& fileName )
{
   assert( !gp_gLog );
   GlobalLogParameters& globalLogPars = const_cast< GlobalLogParameters& >( GlobalLogParameters::getInstance() );

   assert( threshold >= Msg::Always && threshold <= Msg::Verbose );
   globalLogPars.setThreshold( static_cast< Msg::LogLevel >( threshold ) );

   globalLogPars.setUseColors( doUseColors );
   if ( fileName != "" )
   {
      globalLogPars.openFileStream( fileName );
   }

   globalLogPars.setInspectMap( *reinterpret_cast< const GlobalLogParameters::InspectMap* >( inspectMap ) );

   gp_gLog = new Logger( "gLog" );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// initRegressionLogger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initRegressionLogger( const std::string& fileName )
{
   assert( !gp_gLog );
   GlobalLogParameters& globalLogPars = const_cast< GlobalLogParameters& >( GlobalLogParameters::getInstance() );

   globalLogPars.setRegressionConfig();

   if ( fileName != "" )
   {
      globalLogPars.openFileStream( fileName );
   }

   gp_gLog = new Logger( "gLog" );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// closeGlobalLogger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void closeGlobalLogger()
{
   if ( gp_gLog )
   {
      // *gp_gLog << Msg::Verbose << "Global logger closing..." << Msg::EndReq;
      delete gp_gLog;
      gp_gLog = 0;
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const std::string& Logger::getName() const
{
   return m_name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getLoggerId
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LoggerId Logger::getLoggerId() const
{
   return m_loggerId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setMessagePrefix
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Logger::setMessagePrefix( const std::string& prefix )
{
   m_prefix = prefix;
}
