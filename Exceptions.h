#ifndef EXCEPTIONS_H
#define EXCEPTIONS_H

#include <string>

#include "Logger.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// BaseException
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class BaseException
{
   public:
      BaseException();
      BaseException( const std::string& msg );
      virtual ~BaseException();

      virtual void setMessage( const std::string& msg );
      virtual const std::string& getMessage() const;
      virtual const char* getType() const = 0;

   private:
      std::string msg;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Logging
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::ostream& operator<<( std::ostream& os, const BaseException& exception );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// General exception
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionGeneral : public BaseException
{
   public:
      ExceptionGeneral( const std::string& msg );
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// File not found exception
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionFileNotFound : public BaseException
{
   public:
      ExceptionFileNotFound( const std::string& fileName );
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Key not found
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionKeyNotFound : public BaseException
{
   public:
      ExceptionKeyNotFound( const std::string& key, const std::string& whereLooked );
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Type conflict
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionTypeConflict : public BaseException
{
   public:
      ExceptionTypeConflict( const std::string& context );
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Exception raised during reading
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionRead: public BaseException
{
   public:
      ExceptionRead( const std::string& objectBeingRead, const std::string& reason );
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Object not initialised exception
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionNotInit : public BaseException
{
   public:
      ExceptionNotInit( const std::string& object );
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Sound playback not possible
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionNoSound : public BaseException
{
   public:
      ExceptionNoSound();
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Attempt to obtain channel information for MultiChannelRawPcmData with no data
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionEmptyMultiChannelRawPcmData : public BaseException
{
   public:
      ExceptionEmptyMultiChannelRawPcmData();
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Exception that can be raised when a test failed
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionTestFailed : public BaseException
{
   public:
      ExceptionTestFailed( const std::string& testMethod, const std::string& reason );
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Exception raised when data is not well prepared
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionDataNotPrepared : public BaseException
{
   public:
      ExceptionDataNotPrepared( const std::string& requester, const std::string& dataName );
      const char* getType() const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Exception raised when program option is given without argument
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ExceptionOptionUnknown : public BaseException
{
   public:
      ExceptionOptionUnknown( const std::string& option );
      const char* getType() const;
};

#endif // EXCEPTIONS_H
