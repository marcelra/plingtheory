#include "INTuple.h"

#include "RealVector.h"

#include <cassert>
#include <map>

namespace Math
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
INTuple::~INTuple()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getTuple
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RealVector INTuple::getTuple( size_t rowIndex ) const
{
   RealVector result( getNumVariables() );
   for ( size_t iVar = 0; iVar < getNumVariables(); ++iVar )
   {
      result[iVar] = getVariable( iVar )[ rowIndex ];
   }
   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setTuple
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void INTuple::setTuple( size_t rowIndex, const RealVector& row )
{
   assert( row.size() == getNumVariables() );
   for ( size_t iVar = 0; iVar < row.size(); ++iVar )
   {
      getVariable( iVar )[ rowIndex ] = row[ iVar ];
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// append
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void INTuple::append( const INTuple& ntuple )
{
   for ( size_t iTuple = 0; iTuple < ntuple.getNumElements(); ++iTuple )
   {
      addTuple( ntuple.getTuple( iTuple ) );
   }
}

} /// namespace Math
