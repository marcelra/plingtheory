#include "Neuron.h"

#include <cmath>

namespace Mva
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// MlpNode methods
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
MlpNode::MlpNode() :
   m_activation( 0 )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
MlpNode::~MlpNode()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// addSynapse
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MlpNode::addSynapse( const Synapse& synapse )
{
   m_synapses.push_back( synapse );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getWeights
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector< double* > MlpNode::getWeights()
{
   std::vector< double* > result;
   for ( size_t i = 0; i < m_synapses.size(); ++i )
   {
      result.push_back( &m_synapses[ i ].getWeightRef() );
   }
   return result;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Neuron methods
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Neuron::Neuron() :
   m_bias( 0 )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getWeights
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector< double* > Neuron::getWeights()
{
   std::vector< double* > weights = MlpNode::getWeights();
   weights.push_back( &m_bias );
   return weights;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// activationFunc
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double Neuron::activationFunc( double value )
{
   return tanh( m_bias + value );
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// InputNode methods
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// activationFunc
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double InputNode::activationFunc( double value )
{
   return value + m_bias;
}

} /// namespace Mva
