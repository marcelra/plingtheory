#include "RootFinder1DBase.h"

namespace Math
{

RootFinder1DBase::RootFinder1DBase() :
   m_solutionTolerance( 1e-3 ),
   m_maxIterations( 100 )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RootFinder1DBase::~RootFinder1DBase()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setTolerance
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RootFinder1DBase::setTolerance( double tolerance )
{
   m_solutionTolerance = tolerance;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setMaxIterations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void RootFinder1DBase::setMaxIterations( size_t maxIterations )
{
   m_maxIterations = maxIterations;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Subclass Result
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RootFinder1DBase::Result::Result() :
   m_status( NotConverged )
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSolution
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double RootFinder1DBase::Result::getSolution() const
{
   return m_solution;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getEpsilon
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double RootFinder1DBase::Result::getEpsilon() const
{
   return m_eps;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// isConverged
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool RootFinder1DBase::Result::isConverged() const
{
   return m_status == Converged;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getStatus
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RootFinder1DBase::Result::Status RootFinder1DBase::Result::getStatus() const
{
   return m_status;
}


} /// namespace Math
