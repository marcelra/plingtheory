#ifndef ALGORITHMBASE_H
#define ALGORITHMBASE_H

#include "IStorable.h"
#include "Logger.h"

/// Forward declares
class ObjectPool;

class AlgorithmBase : public IStorable
{
   public:
      AlgorithmBase( const std::string& typeName, const std::string& instanceName, bool allowMultipleExecute = false );
      virtual ~AlgorithmBase();

      void execute();

      Logger& getLogger();
      const Logger& getLogger() const;

      const char* getType() const;
      const std::string& getTypeName() const;
      const std::string& getInstanceName() const;

      ObjectPool& getObjectPool();
      const ObjectPool& getObjectPool() const;

   public:
      virtual void executeImpl();

   private:
      mutable Logger      m_logger;
      const std::string   m_typeName;
      const std::string   m_instanceName;
      bool                m_allowMultipleExecute;
      bool                m_hasExecuted;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Inline getLogger methods
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline Logger& AlgorithmBase::getLogger()
{
   return m_logger;
}

inline const Logger& AlgorithmBase::getLogger() const
{
   return m_logger;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Inline getType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline const char* AlgorithmBase::getType() const
{
   return getTypeName().c_str();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Inline getTypeName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline const std::string& AlgorithmBase::getTypeName() const
{
   return m_typeName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Inline getInstanceName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
inline const std::string& AlgorithmBase::getInstanceName() const
{
   return m_instanceName;
}

#endif // ALGORITHMBASE_H
