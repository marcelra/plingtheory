#include "NewtonSolver1D.h"

#include "Logger.h"

#include <cmath>

namespace Math
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NewtonSolver1D::NewtonSolver1D( const IRealFuncWithDerivative& function, double value ) :
   LoggerClient( "NewtonSolver1D" ),
   m_func( function ),
   m_tolerance( 1e-12 ),
   m_value( value )
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void NewtonSolver1D::setTolerance( double tolerance )
{
   m_tolerance = tolerance;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// solve
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NewtonSolver1D::Result NewtonSolver1D::solve( double startValue, size_t nIterationsMax )
{
   getLogger() << Msg::Debug << "In solve..." << Msg::EndReq;
   getLogger() << Msg::Debug << ">>> Problem: f(x) - " << m_value << " = 0." << Msg::EndReq;

   Result result;

   double x = startValue;
   double f = m_func( x ) - m_value;

   for ( size_t iIter = 0; iIter < nIterationsMax; ++iIter )
   {
      double df = m_func.deriv( x );

      if ( df < s_failDerivThreshold )
      {
         result.m_status = Result::FailedStationary;
         break;
      }

      double deltaX = -f / df;

      getLogger() << Msg::Verbose << "--- " << getLogger().getName() << " -> iteration " << iIter << Msg::EndReq;
      getLogger() << Msg::Verbose << "x  = " << x << Msg::EndReq;
      getLogger() << Msg::Verbose << "f  = " << f << Msg::EndReq;
      getLogger() << Msg::Verbose << "df = " << df << Msg::EndReq;
      getLogger() << Msg::Verbose << "dx = " << deltaX << Msg::EndReq;

      x += deltaX;

      f = m_func( x ) - m_value;

      if ( fabs( f ) < m_tolerance )
      {
         result.m_status = Result::Converged;
         break;
      }
   }

   getLogger() << Msg::Debug << ">>> NewtonSolver1D: terminated: status = " << result.m_status << Msg::EndReq;

   if ( !result.isConverged() )
   {
      getLogger() << Msg::Warning << "NewtonSolver1D: failed. Status = " << result.m_status << " (Logger client ID = " << getLoggerClientId() << ")." << Msg::EndReq;
   }

   result.m_solution = x;
   result.m_eps = f;
   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Static members
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double NewtonSolver1D::s_failDerivThreshold = 1e-14;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Subclass Result
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NewtonSolver1D::Result::Result() :
   m_status( NotConverged )
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSolution
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double NewtonSolver1D::Result::getSolution() const
{
   return m_solution;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getEpsilon
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double NewtonSolver1D::Result::getEpsilon() const
{
   return m_eps;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// isConverged
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool NewtonSolver1D::Result::isConverged() const
{
   return m_status == Converged;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getStatus
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NewtonSolver1D::Result::Status NewtonSolver1D::Result::getStatus() const
{
   return m_status;
}

} /// namespace Math
