#include "RawStftData.h"

namespace WaveAnalysis
{

RawStftData::RawStftData( FourierConfig::CSPtr config ) :
   m_config( config )
{}

RawStftData::~RawStftData()
{
   for ( size_t i = 0; i < getNumSpectra(); ++i )
   {
      delete m_transformedData[i];
      delete m_windowLocations[i];
   }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getNumSpectra
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t RawStftData::getNumSpectra() const
{
   return m_transformedData.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSpectrum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FourierSpectrum& RawStftData::getSpectrum( size_t spectrumIndex )
{
   return *m_transformedData[spectrumIndex];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSpectrum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const FourierSpectrum& RawStftData::getSpectrum( size_t spectrumIndex ) const
{
   return *m_transformedData[spectrumIndex];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getWindowLocation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const RawStftData::WindowLocation& RawStftData::getWindowLocation( size_t spectrumIndex ) const
{
   return *m_windowLocations[ spectrumIndex ];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getWindowLocationNoOverlap
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RawStftData::WindowLocation RawStftData::getWindowLocationNoOverlap( size_t spectrumIndex ) const
{
   const WindowLocation& winLocCentre = getWindowLocation( spectrumIndex );
   size_t centreCentre = winLocCentre.getCentre();

   /// Boundary cases
   size_t resultLeft = 0;
   size_t resultRight = getWindowLocation( getNumSpectra() - 1 ).getLastSample();
   size_t centreRight = winLocCentre.getLastSample();

   if ( spectrumIndex > 0 )
   {
      const WindowLocation& winLocLeft = getWindowLocation( spectrumIndex - 1 );
      size_t centreLeft = winLocLeft.getCentre();
      resultLeft = ( centreLeft + centreCentre ) / 2;
   }
   if ( spectrumIndex < getNumSpectra() - 1 )
   {
      const WindowLocation& winLocRight = getWindowLocation( spectrumIndex + 1 );
      size_t centreRight = winLocRight.getCentre();
      resultRight = ( centreCentre + centreRight ) / 2;
   }

   if ( resultLeft < winLocCentre.getFirstSample() )
   {
      resultLeft = winLocCentre.getFirstSample();
   }
   if ( centreRight > winLocCentre.getLastSample() )
   {
      /// TODO: see memcheck comment in StftAlgorithm. Check if this should be -1.
      resultRight = winLocCentre.getLastSample();
   }

   WindowLocation result( resultLeft, resultRight - 1 );
   return result;
}

void RawStftData::addSpectrum( FourierSpectrum* spectrum, RawStftData::WindowLocation* windowLocation )
{
   m_transformedData.push_back( spectrum );
   m_windowLocations.push_back( windowLocation );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// WindowLocation subclass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RawStftData::WindowLocation::WindowLocation( size_t firstSampleIndex, size_t lastSampleIndex ) :
   m_first( firstSampleIndex ),
   m_last( lastSampleIndex )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// copy-constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RawStftData::WindowLocation::WindowLocation( const WindowLocation& other ) :
   m_first( other.m_first ),
   m_last( other.m_last )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// assigmnet operator
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RawStftData::WindowLocation& RawStftData::WindowLocation::operator=( const WindowLocation& other )
{
   if ( &other == this )
   {
      return *this;
   }
   m_first = other.m_first;
   m_last = other.m_last;
   return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getFirstSample
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t RawStftData::WindowLocation::getFirstSample() const
{
   return m_first;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getLastSample
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t RawStftData::WindowLocation::getLastSample() const
{
   return m_last;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getCentre
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t RawStftData::WindowLocation::getCentre() const
{
   return ( m_first + m_last ) / 2;
}

const FourierConfig& RawStftData::getConfig() const
{
   return *m_config;
}

} /// namespace WaveAnalysis
