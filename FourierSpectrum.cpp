#include "FourierSpectrum.h"

#include "FourierTransform.h"
#include "WindowLocation.h"

namespace WaveAnalysis
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FourierSpectrum::FourierSpectrum( FourierConfig::CSPtr fourierConfig, const Complex* first, const Complex* last, WindowLocation* windowLocation ) :
   ComplexVector( first, last ),
   m_config( fourierConfig ),
   m_windowLocation( windowLocation )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// copy-constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FourierSpectrum::FourierSpectrum( const FourierSpectrum& other ) :
   ComplexVector( &other[0], &other[0] + other.size() ),
   m_config( other.m_config ),
   m_windowLocation( other.m_windowLocation ? new WindowLocation( *other.m_windowLocation ) : 0 )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// assignment operator
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FourierSpectrum& FourierSpectrum::operator=( const FourierSpectrum& other )
{
   if ( &other == this )
   {
      return *this;
   }

   /// Copy complex data
   resize( other.size() );
   for ( size_t i = 0; i < other.size(); ++i )
   {
      (*this)[i] = other[i];
   }
   m_config = other.m_config;

   m_windowLocation.reset( new WindowLocation( *other.m_windowLocation ) );

   return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FourierSpectrum::~FourierSpectrum()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// clone
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FourierSpectrum* FourierSpectrum::clone() const
{
   return new FourierSpectrum( *this );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getMagnitudeInBin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double FourierSpectrum::getMagnitudeInBin( size_t binIndex ) const
{
   return abs( (*this)[binIndex] );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getPhaseInBin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double FourierSpectrum::getPhaseInBin( size_t binIndex ) const
{
   return arg( (*this)[binIndex] );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getMagnitude
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RealVector FourierSpectrum::getMagnitude() const
{
   RealVector result( size() );
   for ( size_t i = 0; i < size(); ++i )
   {
      result[i] = abs( (*this)[i] );
   }
   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getPhase
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RealVector FourierSpectrum::getPhase() const
{
   RealVector result( size() );
   for ( size_t i = 0; i < size(); ++i )
   {
      result[i] = arg( (*this)[i] );
   }
   return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getSamplingInfo
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const SamplingInfo& FourierSpectrum::getSamplingInfo() const
{
   return m_config->getSamplingInfo();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const FourierConfig& FourierSpectrum::getConfig() const
{
   return *m_config;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getFrequencyOfin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double FourierSpectrum::getFrequencyOfBin( size_t binIndex ) const
{
   return m_config->getSpectrumFrequencies()[binIndex];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getFrequencies
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const RealVector& FourierSpectrum::getFrequencies() const
{
   return m_config->getSpectrumFrequencies();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getFrequency
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double FourierSpectrum::getFrequency( double x ) const
{
   return m_config->getLowestFrequency() * x;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getWindowLocation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const WindowLocation* FourierSpectrum::getWindowLocation() const
{
   return m_windowLocation.get();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// setWindowLocation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FourierSpectrum::setWindowLocation( WindowLocation* windowLocation )
{
   m_windowLocation.reset( windowLocation );
}


} /// namespace WaveAnalysis
