#include "AvailablePlotsList.h"

#include <QStandardItemModel>

#include <boost/chrono.hpp>
#include <boost/thread.hpp>
#include <boost/thread/mutex.hpp>

namespace
{
boost::mutex modelMutex;
} /// anonymous namespace

namespace Gui
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvailablePlotsList::AvailablePlotsList() :
   SingletonBase( "AvailablePlotsList" ),
   m_newPlotRequested( false ),
   m_newPlotReady( false ),
   m_newPlot( 0 )
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvailablePlotsList::~AvailablePlotsList()
{}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// getInstance
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvailablePlotsList& AvailablePlotsList::getInstance()
{
   if ( !s_instance )
   {
      s_instance = new AvailablePlotsList();
   }
   return *s_instance;
}

/// Singleton instance initialisation.
AvailablePlotsList* AvailablePlotsList::s_instance = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// addPlot
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Plotting::Plot2D* AvailablePlotsList::addPlot( const std::string& name )
{
   boost::mutex::scoped_lock lock( ::modelMutex );
   Plotting::Plot2D* plot = requestNewPlot();
   m_newPlot = 0;
   m_plots.push_back( plot );
   m_plotNames.push_back( name );
   return plot;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// updateModel
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool AvailablePlotsList::updateModel( QStandardItemModel* model )
{
   boost::mutex::scoped_try_lock lock( ::modelMutex );
   if ( !lock )
   {
      return false;
   }

   if ( model->rowCount() == static_cast< int >( m_plots.size() ) )
   {
      return false;
   }

   /// At this point only the addition of plots is supported. Plots cannot be removed.
   assert( model->rowCount() < static_cast< int >( m_plots.size() ) );

   for ( size_t iPlot = model->rowCount(); iPlot < m_plots.size(); ++iPlot )
   {
      /// Create new item.
      QStandardItem* item = new QStandardItem();
      item->setText( m_plotNames[ iPlot ].c_str() );
      item->setData( QVariant::fromValue< Plotting::Plot2D* >( m_plots[ iPlot ] ) );
      item->setEditable( false );

      /// Insert the item in the model.
      model->insertRow( iPlot, item );
   }
   return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// requestNewPlot
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Plotting::Plot2D* AvailablePlotsList::requestNewPlot()
{
   m_newPlotRequested = true;
   while ( !m_newPlotReady )
   {
      boost::this_thread::sleep_for( boost::chrono::milliseconds( 10 ) );
   }
   m_newPlotReady = false;
   return m_newPlot;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// handleNewPlotRequest
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AvailablePlotsList::handleNewPlotRequest()
{
   boost::mutex::scoped_lock lock;
   if ( !m_newPlotRequested )
   {
      return;
   }

   assert ( m_newPlot == 0 );
   m_newPlot = new Plotting::Plot2D();
   m_newPlotRequested = false;
   m_newPlotReady = true;
}

} /// namespace Gui
